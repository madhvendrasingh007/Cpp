Sorting Algorithms
    -> Sorting is the process of arranging the elements of an array so that they can be placed either in ascending or descending order. For example, consider an array A = {A1, A2, A3, A4, ?? An }, the array is called to be in ascending order if element of A are arranged like A1 > A2 > A3 > A4 > A5 > ? > An .

Consider an array:
    int A[10] = { 5, 4, 10, 2, 30, 45, 34, 14, 18, 9 )

The Array sorted in ascending order will be given as:
    A[] = { 2, 4, 5, 9, 10, 14, 18, 30, 34, 45 }

There are different types of array:
    1.Bubble Sort
    2.Selection Sort
    3.Merge Sort
    4.Insertion Sort
    5.Quick Sort
    6.Heap Sort
    7.Radix Sort
    8.Bucket Sort

Time Complexities of Sorting Algorithms:
    -> The complexity of sorting algorithm calculates the running time of a function in which 'n' number of items are to be sorted. The choice for which sorting method is suitable for a problem depends on several dependency configurations for different problems. The most noteworthy of these considerations are:

        -> The length of time spent by the programmer in programming a specific sorting program
        -> Amount of machine time necessary for running the program
        -> The amount of memory necessary for running the program

Algorithm	           Best	            Average	        Worst
Quick Sort	        Ω(n log(n))	      Θ(n log(n))	    O(n^2)
Bubble Sort	            Ω(n)	        Θ(n^2)	        O(n^2)
Merge Sort  	    Ω(n log(n))	      Θ(n log(n))	  O(n log(n))
Insertion Sort	        Ω(n)	        Θ(n^2)	        O(n^2)
Selection Sort	       Ω(n^2)	        Θ(n^2)	        O(n^2)
Heap Sort	        Ω(n log(n))	      Θ(n log(n))	  O(n log(n))
Radix Sort	            Ω(nk)	        Θ(nk)	        O(nk)
Bucket Sort	            Ω(n+k)	        Θ(n+k)	        O(n^2)